{"version":3,"sources":["images/background.png","images/task-kings.png","images/task-time.png","images/task-tournaments.png","images/header.png","images/side-bg.jpg","images/background-screen.png","components/ProgressBar.js","components/shirt/Shirt.js","components/shirt/index.js","components/GameCard.js","components/Loading.js","components/timer/Timer.js","components/timer/index.js","datas/phrases.js","components/GameCore.js","components/BoxHeader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BarContainer","styled","div","props","progress","ProgressBar","ShirtContainer","Shirt","isFull","CardConteiner","GameCard","pathImg","phrasa","src","alt","CircleContainer","Loading","TimerContainer","Timer","endsAt","endsAtVar","moment","clone","diff","useState","date","setDate","useEffect","timer","setInterval","clearInterval","day","hour","minute","second","phrases","GameBox","bgImage","GameCore","isLoading","setLoading","tasks","setObjData","url","a","axios","result","data","console","log","fetchData","map","task","id","type","time","kings","tournaments","key","BoxContainer","header","BoxHeader","Container","sideBg","bgScreen","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.529fcede.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.3a11c8fa.png\";","module.exports = __webpack_public_path__ + \"static/media/task-kings.159c96d7.png\";","module.exports = __webpack_public_path__ + \"static/media/task-time.94ef6c8d.png\";","module.exports = __webpack_public_path__ + \"static/media/task-tournaments.935c7e99.png\";","module.exports = __webpack_public_path__ + \"static/media/header.7bcf559d.png\";","module.exports = __webpack_public_path__ + \"static/media/side-bg.324c7fbc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background-screen.972e8bca.png\";","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst BarContainer = styled.div`\r\n  width: 280px;\r\n  height: 10px;\r\n  border: 2px solid #fff;\r\n  border-radius: 50px;\r\n  background-color: grey;\r\n  > div {\r\n    height: 100%;\r\n    width: ${ props => props.progress }%;\r\n    background-color: #99bb99;\r\n    border-radius: inherit;\r\n  }\r\n`\r\n\r\nexport default function ProgressBar({progress}) {\r\n  return (\r\n    <BarContainer progress={progress}>\r\n      <div></div>\r\n    </ BarContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst ShirtContainer = styled.div`\r\n  flex: 1 1 20%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n  button {\r\n    border: 2px solid #333;\r\n    border-radius: 4px;\r\n    background-color: #eecc55;\r\n    height: 25px;\r\n    width: 100px;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-size: .7rem;\r\n    \r\n    letter-spacing: -1px;\r\n  }\r\n`\r\n\r\nexport const Shirt = ({ isFull }) => (\r\n  <ShirtContainer> \r\n    <button>\r\n      Поставить рубашку\r\n    </button>    \r\n  </ShirtContainer>\r\n)","import { Shirt } from './Shirt'\r\n\r\nexport default Shirt","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport ProgressBar from './ProgressBar'\r\nimport Shirt from './shirt'\r\n\r\nconst CardConteiner = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: start;\r\n  height: 70px;\r\n  width: 100%;\r\n  padding: 20px;\r\n \r\n  > div:nth-of-type(1) {\r\n    flex: 1;\r\n    height: 60px;\r\n    img {\r\n      height: 100%;\r\n      transform: rotate(30deg);\r\n    }\r\n  }\r\n  div:nth-of-type(2) {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-between;\r\n    flex: 3;\r\n    p { \r\n      display: block;\r\n      padding-right: 80px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function GameCard({ pathImg, progress, isFull, phrasa }) {\r\n  return (\r\n    <CardConteiner>\r\n      <div>\r\n        <img src={pathImg} alt=\"icon-game\"></img>\r\n      </div>\r\n      <div>\r\n        <p><b>{phrasa}</b></p>\r\n        <ProgressBar progress={progress} />\r\n      </div>\r\n      <Shirt isFull={isFull} />\r\n    </CardConteiner>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst CircleContainer = styled.div`\r\n    \r\n    height: 100px;\r\n    width: 100px;\r\n    color: rgba($loadercolor, 0.2);\r\n    position: absolute;\r\n    top: 30%;\r\n    right: 40%;\r\n    display: inline-block;\r\n    border: 10px solid white;\r\n    border-radius: 50%;\r\n    border-right-color: grey;\r\n    animation: rotate 1s linear infinite;\r\n\r\n\r\n@keyframes rotate {\r\n    0%{transform: rotate(0);}\r\n    100%{transform: rotate(360deg);}\r\n}\r\n`\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <CircleContainer>\r\n      \r\n    </CircleContainer>\r\n  )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport styled from '@emotion/styled'\r\nimport moment from 'moment'\r\n\r\nconst TimerContainer = styled.div`\r\n  position: absolute;\r\n  top: -25px;\r\n  left: 200px;\r\n  width: auto;\r\n  max-height: 50px; \r\n  display: flex;\r\n  color: white;\r\n  font-size: 30px;\r\n  overflow: hidden;\r\n  p {\r\n    font-size: 10px;\r\n    margin-top: -10px;\r\n    padding-top: 0;\r\n  }\r\n  > div {\r\n    flex: 1 1 auto;\r\n  }\r\n`\r\n\r\nexport const Timer = ( { endsAt } ) => {\r\n\r\n  const endsAtVar = moment(endsAt)\r\n  const clone = moment(endsAtVar).clone()\r\n  const diff = moment(clone) - moment()\r\n\r\n  const [ date, setDate ] = useState(diff)\r\n\r\n  useEffect( () => {\r\n    let timer = setInterval( () => {\r\n      setDate(moment(endsAt) - moment())\r\n    }, 1000)\r\n    \r\n    return () => clearInterval(timer)\r\n  }, [date])\r\n\r\n  \r\n\r\n  const day = moment(date).day()\r\n  const hour = moment(date).hour()\r\n  const minute = moment(date).minute()\r\n  const second = moment(date).second()\r\n  \r\n  \r\n  return (\r\n    <TimerContainer>\r\n     \r\n      <div>\r\n        {day} :\r\n        <p>день</p>\r\n      </div>\r\n      <div>\r\n        {hour}:\r\n        <p>hour</p>\r\n      </div>\r\n      <div>\r\n        {minute}:\r\n        <p>minute</p>\r\n      </div>\r\n      <div>\r\n        {second}\r\n        <p>second</p>\r\n      </div>\r\n    </TimerContainer>\r\n  )\r\n}","import { Timer } from './Timer' \r\n\r\nexport default Timer","export const phrases = [\r\n  'Выйграть 3 игры каждую менее чем за 3 минуты',\r\n  'Выйграть три игры разложив всех королей',\r\n  'Выйграть пять турниров подряд',\r\n]","import React, { useState, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport axios from 'axios'\r\n\r\nimport GameCard from './GameCard'\r\nimport Loading from './Loading'\r\nimport Timer from './timer'\r\n\r\nimport bgImage from '../images/background.png'\r\nimport kings from '../images/task-kings.png'\r\nimport time from '../images/task-time.png'\r\nimport tournaments from '../images/task-tournaments.png'\r\nimport { phrases } from '../datas/phrases'\r\n\r\nconst GameBox = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: start;\r\n  height: 350px;\r\n  width: 550px;\r\n  background-color: opacity;\r\n  background-image: url(${bgImage});\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  padding: 20px;\r\n`\r\n\r\nfunction GameCore() {\r\n\r\n  const [ isLoading, setLoading ] = useState(false)\r\n  const [ { endsAt, tasks}, setObjData ] = useState({endsAt: \"0\", tasks: []})\r\n\r\n  const url = \"https://cors-anywhere.herokuapp.com/http://sol-tst.herokuapp.com/api/v1/tasks/\"\r\n  useEffect( () => {\r\n    let fetchData = async (url) => {\r\n      try {\r\n        setLoading(true)\r\n        let result = await axios(url)\r\n        setObjData(result.data)\r\n        setLoading(false)\r\n      } catch(err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n    fetchData(url)\r\n  }, [])\r\n\r\n  console.log(endsAt)\r\n\r\n\r\n  return (\r\n    <GameBox>{\r\n      isLoading ? <Loading /> :\r\n      <>\r\n        <Timer endsAt={endsAt} />\r\n        {\r\n          tasks.map( (task, id) => (\r\n            <GameCard \r\n            pathImg={\r\n              task.type === 'time' ? time :\r\n              task.type === 'kings' ? kings :\r\n              task.type === 'tournaments' ? tournaments : null\r\n            } \r\n            phrasa={\r\n              task.type === 'time' ? phrases[0] :\r\n              task.type === 'kings' ? phrases[1] :\r\n              task.type === 'tournaments' ? phrases[2] : null \r\n            }\r\n            progress={task.progress} \r\n            isFull={ task.progress === 100 } \r\n            key={id} \r\n            />\r\n          ))\r\n        }\r\n      </>\r\n      }\r\n    </GameBox>\r\n  )\r\n}\r\n\r\nexport default GameCore","import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport header from '../images/header.png'\r\n\r\nconst BoxContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  height: 150px;\r\n  width: 550px;\r\n  z-index: 2;\r\n  background-color: opacity;\r\n  background-image: url(${header});\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n`\r\n\r\nfunction BoxHeader() {\r\n  return (\r\n    <BoxContainer>\r\n      \r\n    </BoxContainer>\r\n  )\r\n}\r\n\r\nexport default BoxHeader","import React from 'react'\nimport styled from '@emotion/styled'\n\nimport GameCore from './components/GameCore'\nimport BoxHeader from './components/BoxHeader'\n\nimport  sideBg  from './images/side-bg.jpg'\nimport bgScreen from './images/background-screen.png'\n\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: #333;\n  background-image: url(${sideBg});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n  display: flex;\n  justify-content: center;\n  \n   & > div {\n    height: 100%;\n    min-width: 700px;\n    background-color: #333;\n    background-image: url(${bgScreen});\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\n\nfunction App() {\n\n  return (\n    <Container>\n      <div>\n        <BoxHeader />\n        <GameCore /> \n      </div>\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}