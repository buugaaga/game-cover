{"version":3,"sources":["images/header.png","images/background.png","images/task-kings.png","images/task-time.png","images/task-tournaments.png","images/side-bg.jpg","images/background-screen.png","components/ProgressBar.js","components/shirt/Shirt.js","components/shirt/index.js","components/GameCard.js","components/Loading.js","components/timer/Timer.js","components/timer/index.js","components/BoxHeader.js","datas/phrases.js","components/GameCore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Filling","styled","div","props","progress","BarContainer","ProgressBar","ShirtContainer","Shirt","isFull","setClosed","onClick","CardConteiner","Img","img","TextAndProgressContainer","GameCard","pathImg","phrasa","src","alt","CircleContainer","Loading","TimerContainer","DateVal","Timer","endsAt","endsAtVar","moment","diff","useState","date","setDate","useEffect","timer","setInterval","clearInterval","day","hour","minute","second","BoxContainer","header","BoxHeader","phrases","GameContainer","bgImage","GameCore","isClosed","isLoading","setLoading","tasks","setObjData","url","a","axios","result","data","console","log","fetchData","map","task","id","type","time","kings","tournaments","key","Container","sideBg","InnerContainer","bgScreen","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdb39e75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.7bcf559d.png\";","module.exports = __webpack_public_path__ + \"static/media/background.3a11c8fa.png\";","module.exports = __webpack_public_path__ + \"static/media/task-kings.159c96d7.png\";","module.exports = __webpack_public_path__ + \"static/media/task-time.94ef6c8d.png\";","module.exports = __webpack_public_path__ + \"static/media/task-tournaments.935c7e99.png\";","module.exports = __webpack_public_path__ + \"static/media/side-bg.324c7fbc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background-screen.972e8bca.png\";","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst Filling = styled.div`\r\n    height: 100%;\r\n    width: ${ props => props.progress }%;\r\n    background-color: #909B5A;\r\n    border-radius: inherit;\r\n`\r\n\r\nconst BarContainer = styled.div`\r\n  width: 340px;\r\n  height: 2vh;\r\n  margin-top: 10px;\r\n  border: 2px solid #FFFED1;\r\n  border-radius: 50px;\r\n  background-color: #3B3B38;\r\n`\r\n\r\n\r\n\r\nexport default function ProgressBar({progress}) {\r\n  return (\r\n    <BarContainer >\r\n      <Filling progress={progress} />\r\n    </ BarContainer>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst ShirtContainer = styled.div`\r\n  flex: 1 1 20%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  padding: 0 20px 0 20px;\r\n  margin: 0;\r\n\r\n  button {\r\n    border: 2px solid #171407;\r\n    border-radius: 4px;\r\n    \r\n    background: radial-gradient(#EDDA79, #EDDA79, #EDDA79, #8E834A);\r\n    height: 30px;\r\n    width: 150px;\r\n    padding: 0 ;\r\n    margin: 0;\r\n    font-size: .7rem;\r\n    letter-spacing: -0.5px;\r\n  }\r\n`\r\n\r\nexport const Shirt = ({ isFull, setClosed }) => (\r\n  <ShirtContainer> \r\n    { isFull ? <button onClick={() => setClosed(true)}>Поставить рубашку</button>  :  null }\r\n    \r\n  </ShirtContainer>\r\n)","import { Shirt } from './Shirt'\r\n\r\nexport default Shirt","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport ProgressBar from './ProgressBar'\r\nimport Shirt from './shirt'\r\n\r\nconst CardConteiner = styled.div`\r\n  display: flex;\r\n  flex-flow: row no-wrap;\r\n  justify-content: start;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  height: 140px;\r\n  width: 100%;\r\n  padding: 10px 20px;\r\n`\r\n\r\nconst Img = styled.img`\r\n  display: block;\r\n  height: 80px;\r\n  width: 65px;\r\n  margin: 0 20px;\r\n  transform: rotate(15deg);\r\n`\r\n\r\nconst TextAndProgressContainer = styled.div`\r\n  flex: 1 1 70%;\r\n  p {\r\n    font-size: 1.2rem;\r\n    width: 300px;\r\n  }\r\n`\r\n\r\nfunction GameCard({ pathImg, progress, isFull, setClosed, phrasa }) {\r\n  return (\r\n    <CardConteiner>\r\n      <Img src={pathImg} alt=\"icon-game\" />\r\n      <TextAndProgressContainer>\r\n        <p><b>{phrasa}</b></p>\r\n        <ProgressBar progress={progress} />\r\n      </TextAndProgressContainer>\r\n      <Shirt isFull={isFull} setClosed={setClosed} />\r\n    </CardConteiner>\r\n  )\r\n}\r\n\r\nexport default GameCard\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst CircleContainer = styled.div`\r\n    height: 100px;\r\n    width: 100px;\r\n    color: rgba($loadercolor, 0.2);\r\n    position: absolute;\r\n    top: 30%;\r\n    right: 40%;\r\n    display: inline-block;\r\n    border: 10px solid white;\r\n    border-radius: 50%;\r\n    border-right-color: grey;\r\n    animation: rotate 1s linear infinite;\r\n\r\n@keyframes rotate {\r\n    0%{transform: rotate(0);}\r\n    100%{transform: rotate(360deg);}\r\n}\r\n`\r\n\r\nfunction Loading() {\r\n  return (\r\n    <CircleContainer />\r\n  )\r\n}\r\n\r\nexport default Loading","import React, {useState, useEffect} from 'react'\r\nimport styled from '@emotion/styled'\r\nimport moment from 'moment'\r\n\r\nconst TimerContainer = styled.div`\r\n  position: absolute;\r\n  top: -24px;\r\n  left: 280px;\r\n\r\n  width: auto;\r\n  max-height: 50px; \r\n  display: flex;\r\n  color: white;\r\n  font-size: 1.7rem;\r\n  overflow: hidden;\r\n  z-index: 4;\r\n`\r\n\r\nconst DateVal = styled.div`\r\n  flex: 1 1;\r\n  p {\r\n    font-size: 0.5rem;\r\n    margin-top: -10px;\r\n    padding-top: 0;\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nexport const Timer = ( { endsAt } ) => {\r\n  \r\n  const endsAtVar = moment(endsAt)\r\n  const diff = moment(endsAtVar) - moment()\r\n\r\n  const [ date, setDate ] = useState(diff)\r\n\r\n  useEffect( () => {\r\n    let timer = setInterval( () => {\r\n      setDate(moment(endsAtVar) - moment())\r\n    }, 1000)\r\n    \r\n    return () => clearInterval(timer)\r\n  }, [endsAtVar])\r\n\r\n  const day = moment(date).date()\r\n  const hour = moment(date).hour()\r\n  const minute = moment(date).minute()\r\n  const second = moment(date).second()\r\n  \r\n  \r\n  return (\r\n    <TimerContainer>\r\n      <DateVal>\r\n        {day}:\r\n        <p>дней</p>\r\n      </DateVal>\r\n      <DateVal>\r\n        {hour}:\r\n        <p>часов</p>\r\n      </DateVal>\r\n      <DateVal>\r\n        {minute}:\r\n        <p>минут</p>\r\n      </DateVal>\r\n      <DateVal>\r\n        {second}\r\n        <p>секунд</p>\r\n      </DateVal>\r\n    </TimerContainer>\r\n  )\r\n}","import { Timer } from './Timer' \r\n\r\nexport default Timer","import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport header from '../images/header.png'\r\n\r\nconst BoxContainer = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n\r\n  height: 170px;\r\n  width: 647px;\r\n  z-index: 2;\r\n  background-color: opacity;\r\n  background-image: url(${header});\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n`\r\n\r\nfunction BoxHeader() {\r\n  return (\r\n    <BoxContainer>\r\n      \r\n    </BoxContainer>\r\n  )\r\n}\r\n\r\nexport default BoxHeader","export const phrases = {\r\n  time: 'Выйграть 3 игры каждую менее чем за 3 минуты',\r\n  kings: 'Выйграть три игры разложив всех королей',\r\n  tournaments: 'Выйграть пять турниров подряд',\r\n}","import React, { useState, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport axios from 'axios'\r\n\r\nimport GameCard from './GameCard'\r\nimport Loading from './Loading'\r\nimport Timer from './timer'\r\nimport BoxHeader from './BoxHeader'\r\n\r\nimport bgImage from '../images/background.png'\r\nimport kings from '../images/task-kings.png'\r\nimport time from '../images/task-time.png'\r\nimport tournaments from '../images/task-tournaments.png'\r\nimport { phrases } from '../datas/phrases'\r\n\r\nconst GameContainer = styled.div`\r\n  position: relative;\r\n  height: 437px;\r\n  width: 647px;\r\n  padding: 25px 20px 50px 20px;\r\n  background-color: opacity;\r\n  background-image: url(${bgImage});\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: center;\r\n`\r\n\r\nfunction GameCore() {\r\n\r\n  const [ isClosed, setClosed ] = useState(false)\r\n  const [ isLoading, setLoading ] = useState(false)\r\n  const [ { endsAt, tasks}, setObjData ] = useState({endsAt: \"0\", tasks: []})\r\n\r\n  const url = \"https://cors-anywhere.herokuapp.com/http://sol-tst.herokuapp.com/api/v1/tasks/\"\r\n  useEffect( () => {\r\n    let fetchData = async (url) => {\r\n      try {\r\n        setLoading(true)\r\n        let result = await axios(url)\r\n        setObjData(result.data)\r\n        setLoading(false)\r\n      } catch(err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n    fetchData(url)\r\n  }, [])\r\n\r\n  console.log(endsAt)  \r\n  if (isClosed) return null \r\n  return (\r\n    <GameContainer>\r\n      <BoxHeader />\r\n      {\r\n      isLoading ? <Loading /> :\r\n      <>\r\n        <Timer endsAt={endsAt} />\r\n        {\r\n          tasks.map( (task, id) => (\r\n            <GameCard \r\n              pathImg={\r\n                task.type === 'time' ? time :\r\n                task.type === 'kings' ? kings :\r\n                task.type === 'tournaments' ? tournaments : null\r\n              } \r\n              phrasa={\r\n                task.type === 'time' ? phrases.time :\r\n                task.type === 'kings' ? phrases.kings :\r\n                task.type === 'tournaments' ? phrases.tournaments : null \r\n              }\r\n              progress={task.progress} \r\n              isFull={ task.progress === 100 } \r\n              setClosed={setClosed}\r\n              key={id} \r\n            />\r\n          ))\r\n        }\r\n      </>\r\n      }\r\n    </GameContainer>\r\n  )\r\n}\r\n\r\nexport default GameCore","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport GameCore from './components/GameCore'\r\n\r\nimport  sideBg  from './images/side-bg.jpg'\r\nimport bgScreen from './images/background-screen.png'\r\n\r\n\r\nconst Container = styled.div`\r\n  height: 800px;\r\n  width: 1920px;\r\n  background-color: #333;\r\n  background-image: url(${sideBg});\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center; \r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst InnerContainer = styled.div`\r\n  height: 800px;\r\n  width: 894px;\r\n  background-color: #333;\r\n  background-image: url(${bgScreen});\r\n  background-size: 100% 100%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Container>\r\n      <InnerContainer>\r\n        <GameCore /> \r\n      </InnerContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}